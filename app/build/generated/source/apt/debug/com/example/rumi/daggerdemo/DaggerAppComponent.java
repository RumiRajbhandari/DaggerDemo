// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.rumi.daggerdemo;

import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<User> getUser1Provider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private MembersInjector<SubActivity> subActivityMembersInjector;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getUser1Provider = UserModule_GetUser1Factory.create(builder.userModule);

    this.mainActivityMembersInjector = MainActivity_MembersInjector.create(getUser1Provider);

    this.subActivityMembersInjector = SubActivity_MembersInjector.create(getUser1Provider);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    mainActivityMembersInjector.injectMembers(mainActivity);
  }

  @Override
  public void inject(SubActivity subActivity) {
    subActivityMembersInjector.injectMembers(subActivity);
  }

  public static final class Builder {
    private UserModule userModule;

    private Builder() {}

    public AppComponent build() {
      if (userModule == null) {
        this.userModule = new UserModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder userModule(UserModule userModule) {
      this.userModule = Preconditions.checkNotNull(userModule);
      return this;
    }
  }
}
